#include <stdio.h>
#include <stdlib.h>

#define SIZE 100
int tree[SIZE];

void init() {
    for (int i = 0; i < SIZE; i++)
        tree[i] = -1;
}

void insert(int n) {
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &tree[i]);
    }
}

void preorder(int root) {
    if (root >= SIZE || tree[root] == -1)
        return;

    printf("%d ", tree[root]);
    preorder(2 * root + 1);
    preorder(2 * root + 2);
}

void inorder(int root) {
    if (root >= SIZE || tree[root] == -1)
        return;

    inorder(2 * root + 1);
    printf("%d ", tree[root]);
    inorder(2 * root + 2);
}

void postorder(int root) {
    if (root >= SIZE || tree[root] == -1)
        return;

    postorder(2 * root + 1);
    postorder(2 * root + 2);
    printf("%d ", tree[root]);
}

int search(int target) {
    for (int i = 0; i < SIZE; i++) {
        if (tree[i] == target)
            return i;
    }
    return -1;
}

void deleteElement(int val) {
    int i = search(val);
    if (i == -1) {
        printf("Element not found!\n");
        return;
    }

    int j = SIZE - 1;
    while (j >= 0 && tree[j] == -1) j--;

    if (j >= 0) {
        tree[i] = tree[j];
        tree[j] = -1;
        printf("Element %d deleted!\n", val);
    }
}

int main() {
    int choice, n, val;

    init();

    while (1) {
        printf("\nBinary Tree Array Operations:\n");
        printf("1. Insert elements\n");
        printf("2. Preorder traversal\n");
        printf("3. Inorder traversal\n");
        printf("4. Postorder traversal\n");
        printf("5. Search element\n");
        printf("6. Delete element\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of elements to insert: ");
                scanf("%d", &n);
                insert(n);
                break;
            case 2:
                printf("Preorder traversal: ");
                preorder(0);
                printf("\n");
                break;
            case 3:
                printf("Inorder traversal: ");
                inorder(0);
                printf("\n");
                break;
            case 4:
                printf("Postorder traversal: ");
                postorder(0);
                printf("\n");
                break;
            case 5:
                printf("Enter value to search: ");
                scanf("%d", &val);
                if (search(val) != -1)
                    printf("Element found!\n");
                else
                    printf("Element not found!\n");
                break;
            case 6:
                printf("Enter value to delete: ");
                scanf("%d", &val);
                deleteElement(val);
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}

                        //                          |10|
                        //              |20|                      |30|
                        //        |40|        |-1|          |60|        |70|
                        //     |80|  |90|  |-1|  |-1|    |-1|  |-1| |100|  |X|
